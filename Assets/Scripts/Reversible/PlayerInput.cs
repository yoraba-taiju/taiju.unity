//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Reversible
{
    public partial class @PlayerInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Playing"",
            ""id"": ""28d8ba19-7970-4a63-8bb6-4aeea7414e24"",
            ""actions"": [
                {
                    ""name"": ""BackClock"",
                    ""type"": ""Button"",
                    ""id"": ""cbde9c19-f494-4604-be08-3dc432808b2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7ee1627e-e2e9-4895-b432-2e30743f74b6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""99284659-668a-4879-99f8-07ba0744b17d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spell"",
                    ""type"": ""Button"",
                    ""id"": ""52098b62-066c-4ff9-9672-8f7fa0bce1a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2f147dcd-ffe9-4317-83a4-d0e5f28e77a7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e2e609d5-b15d-43fa-bea7-3a3070184bd5"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""087211db-be00-4c40-98d3-d78b26e4020c"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""11664393-a6d0-45d1-8e19-4f7b57e16953"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""738e6514-166c-4e91-9cc1-799ce5f71a25"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""80a2001f-1b4e-44ae-9f41-e12b439f495a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69898c75-f7c6-4a01-a378-40a9af6218f3"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff542776-10c9-43b8-ab48-07e16bd0f772"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackClock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""accdba43-6560-4be5-92fc-a8df729e4043"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""84bf1fa3-f976-4778-baa1-5cc502a1703c"",
            ""actions"": [
                {
                    ""name"": ""Yes"",
                    ""type"": ""Button"",
                    ""id"": ""eafdf54a-aa06-4720-bbad-33bee6011939"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""No"",
                    ""type"": ""Button"",
                    ""id"": ""807f5e0e-78a9-4f57-8c66-13f5392f75b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37df2d15-9853-44b2-b558-3618e91a222f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df251135-15e7-4e0e-a3cb-89eb58147a4f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""No"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Playing
            m_Playing = asset.FindActionMap("Playing", throwIfNotFound: true);
            m_Playing_BackClock = m_Playing.FindAction("BackClock", throwIfNotFound: true);
            m_Playing_Move = m_Playing.FindAction("Move", throwIfNotFound: true);
            m_Playing_Fire = m_Playing.FindAction("Fire", throwIfNotFound: true);
            m_Playing_Spell = m_Playing.FindAction("Spell", throwIfNotFound: true);
            // Pause
            m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
            m_Pause_Yes = m_Pause.FindAction("Yes", throwIfNotFound: true);
            m_Pause_No = m_Pause.FindAction("No", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Playing
        private readonly InputActionMap m_Playing;
        private IPlayingActions m_PlayingActionsCallbackInterface;
        private readonly InputAction m_Playing_BackClock;
        private readonly InputAction m_Playing_Move;
        private readonly InputAction m_Playing_Fire;
        private readonly InputAction m_Playing_Spell;
        public struct PlayingActions
        {
            private @PlayerInput m_Wrapper;
            public PlayingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @BackClock => m_Wrapper.m_Playing_BackClock;
            public InputAction @Move => m_Wrapper.m_Playing_Move;
            public InputAction @Fire => m_Wrapper.m_Playing_Fire;
            public InputAction @Spell => m_Wrapper.m_Playing_Spell;
            public InputActionMap Get() { return m_Wrapper.m_Playing; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayingActions set) { return set.Get(); }
            public void SetCallbacks(IPlayingActions instance)
            {
                if (m_Wrapper.m_PlayingActionsCallbackInterface != null)
                {
                    @BackClock.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnBackClock;
                    @BackClock.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnBackClock;
                    @BackClock.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnBackClock;
                    @Move.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnMove;
                    @Fire.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnFire;
                    @Fire.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnFire;
                    @Fire.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnFire;
                    @Spell.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnSpell;
                    @Spell.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnSpell;
                    @Spell.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnSpell;
                }
                m_Wrapper.m_PlayingActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @BackClock.started += instance.OnBackClock;
                    @BackClock.performed += instance.OnBackClock;
                    @BackClock.canceled += instance.OnBackClock;
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Fire.started += instance.OnFire;
                    @Fire.performed += instance.OnFire;
                    @Fire.canceled += instance.OnFire;
                    @Spell.started += instance.OnSpell;
                    @Spell.performed += instance.OnSpell;
                    @Spell.canceled += instance.OnSpell;
                }
            }
        }
        public PlayingActions @Playing => new PlayingActions(this);

        // Pause
        private readonly InputActionMap m_Pause;
        private IPauseActions m_PauseActionsCallbackInterface;
        private readonly InputAction m_Pause_Yes;
        private readonly InputAction m_Pause_No;
        public struct PauseActions
        {
            private @PlayerInput m_Wrapper;
            public PauseActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Yes => m_Wrapper.m_Pause_Yes;
            public InputAction @No => m_Wrapper.m_Pause_No;
            public InputActionMap Get() { return m_Wrapper.m_Pause; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
            public void SetCallbacks(IPauseActions instance)
            {
                if (m_Wrapper.m_PauseActionsCallbackInterface != null)
                {
                    @Yes.started -= m_Wrapper.m_PauseActionsCallbackInterface.OnYes;
                    @Yes.performed -= m_Wrapper.m_PauseActionsCallbackInterface.OnYes;
                    @Yes.canceled -= m_Wrapper.m_PauseActionsCallbackInterface.OnYes;
                    @No.started -= m_Wrapper.m_PauseActionsCallbackInterface.OnNo;
                    @No.performed -= m_Wrapper.m_PauseActionsCallbackInterface.OnNo;
                    @No.canceled -= m_Wrapper.m_PauseActionsCallbackInterface.OnNo;
                }
                m_Wrapper.m_PauseActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Yes.started += instance.OnYes;
                    @Yes.performed += instance.OnYes;
                    @Yes.canceled += instance.OnYes;
                    @No.started += instance.OnNo;
                    @No.performed += instance.OnNo;
                    @No.canceled += instance.OnNo;
                }
            }
        }
        public PauseActions @Pause => new PauseActions(this);
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IPlayingActions
        {
            void OnBackClock(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnFire(InputAction.CallbackContext context);
            void OnSpell(InputAction.CallbackContext context);
        }
        public interface IPauseActions
        {
            void OnYes(InputAction.CallbackContext context);
            void OnNo(InputAction.CallbackContext context);
        }
    }
}
